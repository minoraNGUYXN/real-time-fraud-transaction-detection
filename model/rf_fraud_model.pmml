<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<PMML xmlns="http://www.dmg.org/PMML-4_4" xmlns:data="http://jpmml.org/jpmml-model/InlineTable" version="4.4">
	<Header>
		<Application name="SkLearn2PMML package" version="0.121.1"/>
		<Timestamp>2025-08-08T08:18:15Z</Timestamp>
	</Header>
	<MiningBuildTask>
		<Extension name="repr">PMMLPipeline(steps=[('preprocessor', ColumnTransformer(transformers=[('cat', TargetEncoder(),
                                 ['category', 'merchant']),
                                ('num',
                                 Pipeline(steps=[('log',
                                                  FunctionTransformer(func=&lt;ufunc 'log1p'&gt;,
                                                                      validate=True)),
                                                 ('scaler', RobustScaler())]),
                                 ['amt', 'distance']),
                                ('age', RobustScaler(), ['age'])])),
       ('classifier', RandomForestClassifier(max_depth=6, random_state=42))])</Extension>
	</MiningBuildTask>
	<DataDictionary>
		<DataField name="is_fraud" optype="categorical" dataType="integer">
			<Value value="0"/>
			<Value value="1"/>
		</DataField>
		<DataField name="category" optype="categorical" dataType="string">
			<Value value="shopping_pos"/>
			<Value value="grocery_pos"/>
			<Value value="shopping_net"/>
			<Value value="gas_transport"/>
			<Value value="health_fitness"/>
			<Value value="misc_pos"/>
			<Value value="entertainment"/>
			<Value value="kids_pets"/>
			<Value value="home"/>
			<Value value="misc_net"/>
			<Value value="grocery_net"/>
			<Value value="travel"/>
			<Value value="personal_care"/>
			<Value value="food_dining"/>
		</DataField>
		<DataField name="merchant" optype="categorical" dataType="string">
			<Value value="Hickle Group"/>
			<Value value="Wolf Inc"/>
			<Value value="Fisher Inc"/>
			<Value value="Botsford Ltd"/>
			<Value value="Heathcote, Yost and Kertzmann"/>
			<Value value="Luettgen PLC"/>
			<Value value="Carroll PLC"/>
			<Value value="Torp-Lemke"/>
			<Value value="Padberg-Rogahn"/>
			<Value value="Kris-Padberg"/>
			<Value value="Brown Inc"/>
			<Value value="Runte, Green and Emard"/>
			<Value value="Bins, Balistreri and Beatty"/>
			<Value value="Ledner, Hartmann and Feest"/>
			<Value value="Altenwerth-Kilback"/>
			<Value value="Auer-West"/>
			<Value value="Ankunding LLC"/>
			<Value value="Kilback LLC"/>
			<Value value="Padberg-Sauer"/>
			<Value value="Macejkovic-Lesch"/>
			<Value value="Kuhn LLC"/>
			<Value value="Lockman, West and Runte"/>
			<Value value="Hintz, Bauch and Smith"/>
			<Value value="Kuhic, Bins and Pfeffer"/>
			<Value value="Rempel PLC"/>
			<Value value="Mosciski, Gislason and Mertz"/>
			<Value value="Bahringer, Schoen and Corkery"/>
			<Value value="Turcotte-Halvorson"/>
			<Value value="Kuhic Inc"/>
			<Value value="Botsford PLC"/>
			<Value value="Champlin, Rolfson and Connelly"/>
			<Value value="Lockman Ltd"/>
			<Value value="Wuckert-Goldner"/>
			<Value value="Kris-Weimann"/>
			<Value value="Reichert, Huels and Hoppe"/>
			<Value value="Schamberger-OKeefe"/>
			<Value value="Barton Inc"/>
			<Value value="Gaylord-Powlowski"/>
			<Value value="Romaguera Ltd"/>
			<Value value="Mosciski, Ziemann and Farrell"/>
			<Value value="Connelly, Reichert and Fritsch"/>
			<Value value="Kiehn-Emmerich"/>
			<Value value="Goyette Inc"/>
			<Value value="Terry Ltd"/>
			<Value value="Durgan-Auer"/>
			<Value value="Gulgowski LLC"/>
			<Value value="Bogisich Inc"/>
			<Value value="Rutherford-Mertz"/>
			<Value value="Feil-Morar"/>
			<Value value="Jenkins, Hauck and Friesen"/>
			<Value value="Bode-Rempel"/>
			<Value value="Pacocha-OReilly"/>
			<Value value="Little, Gutmann and Lynch"/>
			<Value value="Kutch, Hermiston and Farrell"/>
			<Value value="Runolfsson and Sons"/>
			<Value value="Cormier LLC"/>
			<Value value="Kling, Howe and Schneider"/>
			<Value value="Eichmann-Russel"/>
			<Value value="Kiehn Inc"/>
			<Value value="Becker, Harris and Harvey"/>
			<Value value="Thiel PLC"/>
			<Value value="Predovic Inc"/>
			<Value value="Kassulke Inc"/>
			<Value value="OKeefe-Hudson"/>
			<Value value="Deckow-OConner"/>
			<Value value="Roberts, Daniel and Macejkovic"/>
			<Value value="Bauch-Raynor"/>
			<Value value="Kozey-Boehm"/>
			<Value value="Daugherty, Pouros and Beahan"/>
			<Value value="Conroy Ltd"/>
			<Value value="Kihn-Fritsch"/>
			<Value value="Abbott-Steuber"/>
			<Value value="Schultz, Simonis and Little"/>
			<Value value="Kutch, Steuber and Gerhold"/>
			<Value value="Haag-Blanda"/>
			<Value value="Cartwright PLC"/>
			<Value value="Weimann, Kuhic and Beahan"/>
			<Value value="Morissette-Schaefer"/>
			<Value value="Mohr-Bayer"/>
			<Value value="Johnston, Nikolaus and Maggio"/>
			<Value value="Haley Group"/>
			<Value value="Cole PLC"/>
			<Value value="Labadie, Treutel and Bode"/>
			<Value value="Schuppe, Nolan and Hoeger"/>
			<Value value="Schmeler, Bashirian and Price"/>
			<Value value="Schumm, Bauch and Ondricka"/>
			<Value value="Runolfsdottir, Mueller and Hand"/>
			<Value value="Wilkinson LLC"/>
			<Value value="Douglas, Schneider and Turner"/>
			<Value value="Volkman Ltd"/>
			<Value value="Huel, Hammes and Witting"/>
			<Value value="Stamm-Witting"/>
			<Value value="Weimann-Lockman"/>
			<Value value="Shields-Wunsch"/>
			<Value value="Parker, Nolan and Trantow"/>
			<Value value="Rempel Inc"/>
			<Value value="Thompson-Gleason"/>
			<Value value="Brown PLC"/>
			<Value value="Koepp-Parker"/>
			<Value value="Kirlin and Sons"/>
			<Value value="Strosin-Cruickshank"/>
			<Value value="Cartwright-Harris"/>
			<Value value="Pagac LLC"/>
			<Value value="Jacobi and Sons"/>
			<Value value="Gottlieb, Considine and Schultz"/>
			<Value value="Homenick LLC"/>
			<Value value="Durgan, Gislason and Spencer"/>
			<Value value="Jaskolski-Vandervort"/>
			<Value value="Abshire PLC"/>
			<Value value="Langworth, Boehm and Gulgowski"/>
			<Value value="Brekke and Sons"/>
			<Value value="Huel Ltd"/>
			<Value value="Bednar Inc"/>
			<Value value="OReilly, Mohr and Purdy"/>
			<Value value="Reichert, Rowe and Mraz"/>
			<Value value="Welch, Rath and Koepp"/>
			<Value value="Lynch Ltd"/>
			<Value value="Champlin and Sons"/>
			<Value value="Fahey Inc"/>
			<Value value="Bernhard Inc"/>
			<Value value="Windler, Goodwin and Kovacek"/>
			<Value value="Christiansen-Gusikowski"/>
			<Value value="Armstrong, Walter and Gottlieb"/>
			<Value value="Hamill-DAmore"/>
			<Value value="Dach-Nader"/>
			<Value value="Bailey-Morar"/>
			<Value value="Block Group"/>
			<Value value="Medhurst, Cartwright and Ebert"/>
			<Value value="Osinski Inc"/>
			<Value value="Waelchi Inc"/>
			<Value value="Lang, Towne and Schuppe"/>
			<Value value="DuBuque LLC"/>
			<Value value="Emard Inc"/>
			<Value value="Gottlieb Group"/>
			<Value value="Fadel Inc"/>
			<Value value="Dickinson Ltd"/>
			<Value value="Baumbach, Strosin and Nicolas"/>
			<Value value="Bode-Schuster"/>
			<Value value="Bednar PLC"/>
			<Value value="Jakubowski Inc"/>
			<Value value="Turner and Sons"/>
			<Value value="Friesen-DAmore"/>
			<Value value="McKenzie-Huels"/>
			<Value value="Rowe, Batz and Goodwin"/>
			<Value value="Wiza LLC"/>
			<Value value="Price Inc"/>
			<Value value="Erdman-Ebert"/>
			<Value value="Leffler-Goldner"/>
			<Value value="Terry-Huel"/>
			<Value value="Mueller, Gerhold and Mueller"/>
			<Value value="Kozey-McDermott"/>
			<Value value="Flatley Group"/>
			<Value value="Zboncak, Rowe and Murazik"/>
			<Value value="Dicki Ltd"/>
			<Value value="Bahringer-Streich"/>
			<Value value="Koss, McLaughlin and Mayer"/>
			<Value value="Cole, Hills and Jewess"/>
			<Value value="Reichert, Shanahan and Hayes"/>
			<Value value="Nienow, Barrows and Romaguera"/>
			<Value value="Lubowitz, Terry and Stracke"/>
			<Value value="Schumm, McLaughlin and Carter"/>
			<Value value="Simonis-Prohaska"/>
			<Value value="Baumbach, Feeney and Morar"/>
			<Value value="Klocko, Runolfsdottir and Breitenberg"/>
			<Value value="Quitzon, Green and Bashirian"/>
			<Value value="McGlynn-Heathcote"/>
			<Value value="Kutch-Hegmann"/>
			<Value value="Jones, Sawayn and Romaguera"/>
			<Value value="Romaguera and Sons"/>
			<Value value="Denesik and Sons"/>
			<Value value="Towne, Greenholt and Koepp"/>
			<Value value="Olson, Becker and Koch"/>
			<Value value="Miller-Harris"/>
			<Value value="Corwin-Gorczany"/>
			<Value value="Hills-Witting"/>
			<Value value="Mante Group"/>
			<Value value="Hermiston, Pacocha and Smith"/>
			<Value value="Harris, Gusikowski and Heaney"/>
			<Value value="Kozey-Kuhlman"/>
			<Value value="Beier LLC"/>
			<Value value="Metz, Russel and Metz"/>
			<Value value="Bins-Rice"/>
			<Value value="Kunze, Larkin and Mayert"/>
			<Value value="Jast Ltd"/>
			<Value value="Murray-Smitham"/>
			<Value value="Kerluke, Kertzmann and Wiza"/>
			<Value value="Hayes, Marquardt and Dibbert"/>
			<Value value="Osinski, Ledner and Leuschke"/>
			<Value value="Zboncak Ltd"/>
			<Value value="Kuhic LLC"/>
			<Value value="Kovacek, Dibbert and Ondricka"/>
			<Value value="Heidenreich PLC"/>
			<Value value="Gutmann-Upton"/>
			<Value value="Morissette LLC"/>
			<Value value="Moen, Reinger and Murphy"/>
			<Value value="Kutch and Sons"/>
			<Value value="Greenholt, OHara and Balistreri"/>
			<Value value="Doyle Ltd"/>
			<Value value="Kilback, Nitzsche and Leffler"/>
			<Value value="Stoltenberg-Beatty"/>
			<Value value="Howe PLC"/>
			<Value value="Huel-Langworth"/>
			<Value value="Schimmel-Olson"/>
			<Value value="Crist, Jakubowski and Littel"/>
			<Value value="McCullough LLC"/>
			<Value value="McDermott, Osinski and Morar"/>
			<Value value="Kuphal-Toy"/>
			<Value value="Kautzer and Sons"/>
			<Value value="Ankunding-Carroll"/>
			<Value value="Thiel-Thiel"/>
			<Value value="Dooley-Thompson"/>
			<Value value="Monahan, Bogisich and Ledner"/>
			<Value value="Kuvalis Ltd"/>
			<Value value="Roob, Conn and Tremblay"/>
			<Value value="Mraz-Herzog"/>
			<Value value="Kutch-Wilderman"/>
			<Value value="Rohan, White and Aufderhar"/>
			<Value value="Medhurst Inc"/>
			<Value value="Buckridge PLC"/>
			<Value value="Bins-Howell"/>
			<Value value="Schoen, Kuphal and Nitzsche"/>
			<Value value="Ullrich Ltd"/>
			<Value value="Pouros-Haag"/>
			<Value value="Metz-Boehm"/>
			<Value value="Friesen Inc"/>
			<Value value="Stroman, Hudson and Erdman"/>
			<Value value="Greenholt, Jacobi and Gleason"/>
			<Value value="Hermann-Gaylord"/>
			<Value value="Feil, Hilpert and Koss"/>
			<Value value="Schoen, Nienow and Bauch"/>
			<Value value="Kerluke-Abshire"/>
			<Value value="Renner Ltd"/>
			<Value value="Kihn Inc"/>
			<Value value="Leannon-Nikolaus"/>
			<Value value="Bahringer, Osinski and Block"/>
			<Value value="Berge LLC"/>
			<Value value="Kling Inc"/>
			<Value value="Cronin, Kshlerin and Weber"/>
			<Value value="Effertz, Welch and Schowalter"/>
			<Value value="Gerlach Inc"/>
			<Value value="Heller PLC"/>
			<Value value="Koss, Hansen and Lueilwitz"/>
			<Value value="Swift PLC"/>
			<Value value="Kerluke PLC"/>
			<Value value="Stracke-Lemke"/>
			<Value value="Marks Inc"/>
			<Value value="Gottlieb-Hansen"/>
			<Value value="Ernser-Feest"/>
			<Value value="Nitzsche, Kessler and Wolff"/>
			<Value value="Kub PLC"/>
			<Value value="Effertz LLC"/>
			<Value value="Dibbert-Green"/>
			<Value value="Padberg-Welch"/>
			<Value value="Crooks and Sons"/>
			<Value value="Bahringer-Larson"/>
			<Value value="Hudson-Grady"/>
			<Value value="Beier-Hyatt"/>
			<Value value="Casper, Hand and Zulauf"/>
			<Value value="Block-Parisian"/>
			<Value value="Eichmann, Bogan and Rodriguez"/>
			<Value value="Altenwerth, Cartwright and Koss"/>
			<Value value="Lubowitz-Walter"/>
			<Value value="Cormier, Stracke and Thiel"/>
			<Value value="Ferry, Lynch and Kautzer"/>
			<Value value="Jaskolski-Dibbert"/>
			<Value value="Ebert-Daugherty"/>
			<Value value="Huels-Hahn"/>
			<Value value="Lynch-Wisozk"/>
			<Value value="Donnelly PLC"/>
			<Value value="White and Sons"/>
			<Value value="Kutch LLC"/>
			<Value value="Sporer Inc"/>
			<Value value="Medhurst PLC"/>
			<Value value="Schaefer, Maggio and Daugherty"/>
			<Value value="Bernier and Sons"/>
			<Value value="Eichmann, Hayes and Treutel"/>
			<Value value="Schmidt and Sons"/>
			<Value value="Veum-Koelpin"/>
			<Value value="Schulist Ltd"/>
			<Value value="Boyer PLC"/>
			<Value value="Bashirian Group"/>
			<Value value="Raynor, Feest and Miller"/>
			<Value value="Welch Inc"/>
			<Value value="Torp-Labadie"/>
			<Value value="Bahringer Group"/>
			<Value value="Reilly and Sons"/>
			<Value value="Johns Inc"/>
			<Value value="Stark-Batz"/>
			<Value value="Hahn, Douglas and Schowalter"/>
			<Value value="Volkman-Predovic"/>
			<Value value="Herzog Ltd"/>
			<Value value="Yost, Schamberger and Windler"/>
			<Value value="Ledner-Pfannerstill"/>
			<Value value="Cummerata-Jones"/>
			<Value value="Conroy-Cruickshank"/>
			<Value value="Wintheiser, Dietrich and Schimmel"/>
			<Value value="Witting, Beer and Ernser"/>
			<Value value="Morissette PLC"/>
			<Value value="Schmitt Inc"/>
			<Value value="Klein Group"/>
			<Value value="Gleason-Macejkovic"/>
			<Value value="Bins-Tillman"/>
			<Value value="Wilkinson PLC"/>
			<Value value="Fisher-Schowalter"/>
			<Value value="Streich, Hansen and Veum"/>
			<Value value="Botsford and Sons"/>
			<Value value="Pacocha-Bauch"/>
			<Value value="Goldner, Kovacek and Abbott"/>
			<Value value="Cummings Group"/>
			<Value value="Goodwin-Nitzsche"/>
			<Value value="Hauck, Dietrich and Funk"/>
			<Value value="Schmeler Inc"/>
			<Value value="Rau-Grant"/>
			<Value value="Rippin, Kub and Mann"/>
			<Value value="Nienow PLC"/>
			<Value value="Sawayn PLC"/>
			<Value value="Collier LLC"/>
			<Value value="Pacocha-Weissnat"/>
			<Value value="Harris Inc"/>
			<Value value="Schoen-Quigley"/>
			<Value value="Beer-Jast"/>
			<Value value="Kassulke PLC"/>
			<Value value="Vandervort-Funk"/>
			<Value value="Schroeder, Wolff and Hermiston"/>
			<Value value="Tillman, Fritsch and Schmitt"/>
			<Value value="Bartoletti-Wunsch"/>
			<Value value="Cruickshank-Mills"/>
			<Value value="Rippin-VonRueden"/>
			<Value value="Kilback Group"/>
			<Value value="Jewess LLC"/>
			<Value value="Kling-Grant"/>
			<Value value="Waelchi-Wolf"/>
			<Value value="Jast-McDermott"/>
			<Value value="Weber and Sons"/>
			<Value value="Rowe-Vandervort"/>
			<Value value="Pouros-Conroy"/>
			<Value value="Ferry, Reichel and DuBuque"/>
			<Value value="Turner, Ziemann and Lehner"/>
			<Value value="Moore, Williamson and Emmerich"/>
			<Value value="Heller, Gutmann and Zieme"/>
			<Value value="Cummings LLC"/>
			<Value value="Fadel, Mertz and Rippin"/>
			<Value value="Kulas Group"/>
			<Value value="Dibbert and Sons"/>
			<Value value="Swaniawski, Lowe and Robel"/>
			<Value value="Lemke-Gutmann"/>
			<Value value="Gislason Group"/>
			<Value value="Williamson LLC"/>
			<Value value="Kuphal-Predovic"/>
			<Value value="Streich Ltd"/>
			<Value value="Streich, Dietrich and Barton"/>
			<Value value="Bernhard-Lesch"/>
			<Value value="Roberts, Ryan and Smith"/>
			<Value value="Bahringer, Bergnaum and Quitzon"/>
			<Value value="Hintz-Bruen"/>
			<Value value="Volkman PLC"/>
			<Value value="Quitzon-Goyette"/>
			<Value value="Shields Inc"/>
			<Value value="Wilkinson Ltd"/>
			<Value value="Torphy-Goyette"/>
			<Value value="Lesch Ltd"/>
			<Value value="Kunze Inc"/>
			<Value value="Goyette, Howell and Collier"/>
			<Value value="Little Ltd"/>
			<Value value="Connelly PLC"/>
			<Value value="Koelpin and Sons"/>
			<Value value="Hettinger, McCullough and Fay"/>
			<Value value="Schmeler-Howe"/>
			<Value value="Nienow, Ankunding and Collier"/>
			<Value value="Pfeffer and Sons"/>
			<Value value="Hills, Hegmann and Schaefer"/>
			<Value value="Berge, Kautzer and Harris"/>
			<Value value="Bogisich-Homenick"/>
			<Value value="Langosh, Wintheiser and Hyatt"/>
			<Value value="Dare, Fritsch and Zboncak"/>
			<Value value="Flatley-Durgan"/>
			<Value value="Kessler Group"/>
			<Value value="Morissette, Weber and Wiegand"/>
			<Value value="Bogisich-Weimann"/>
			<Value value="Kihn-Schuster"/>
			<Value value="Watsica LLC"/>
			<Value value="Ruecker, Beer and Collier"/>
			<Value value="Friesen-Stamm"/>
			<Value value="Windler LLC"/>
			<Value value="Kutch Group"/>
			<Value value="Nicolas, Hills and McGlynn"/>
			<Value value="Mayert Group"/>
			<Value value="Haley, Jewess and Bechtelar"/>
			<Value value="Hudson-Ratke"/>
			<Value value="Daugherty LLC"/>
			<Value value="Schiller Ltd"/>
			<Value value="Kunde-Sanford"/>
			<Value value="Schaefer Ltd"/>
			<Value value="Spinka-Welch"/>
			<Value value="Johnson, Runolfsdottir and Mayer"/>
			<Value value="Adams-Barrows"/>
			<Value value="Powlowski-Weimann"/>
			<Value value="Roberts-Beahan"/>
			<Value value="Little-Gleichner"/>
			<Value value="Gibson-Deckow"/>
			<Value value="Dietrich-Fadel"/>
			<Value value="McDermott-Weimann"/>
			<Value value="Hills-Boyer"/>
			<Value value="Goyette-Gerhold"/>
			<Value value="Romaguera, Cruickshank and Greenholt"/>
			<Value value="Rodriguez, Yost and Jenkins"/>
			<Value value="Dooley Inc"/>
			<Value value="Rau and Sons"/>
			<Value value="Hagenes, Kohler and Hoppe"/>
			<Value value="Koepp-Witting"/>
			<Value value="Schaefer, Fay and Hilll"/>
			<Value value="Shanahan-Lehner"/>
			<Value value="Skiles LLC"/>
			<Value value="Swaniawski, Nitzsche and Welch"/>
			<Value value="Stiedemann Ltd"/>
			<Value value="Hackett-Lueilwitz"/>
			<Value value="Prohaska-Murray"/>
			<Value value="Maggio-Fahey"/>
			<Value value="Stark-Koss"/>
			<Value value="Bernier, Volkman and Hoeger"/>
			<Value value="Upton PLC"/>
			<Value value="Streich, Rolfson and Wilderman"/>
			<Value value="Murray Ltd"/>
			<Value value="Herman, Treutel and Dickens"/>
			<Value value="Nolan-Williamson"/>
			<Value value="Raynor, Reinger and Hagenes"/>
			<Value value="Brown, Homenick and Lesch"/>
			<Value value="Torp, Muller and Borer"/>
			<Value value="Jakubowski Group"/>
			<Value value="Hermann and Sons"/>
			<Value value="Dach-Borer"/>
			<Value value="Brown-Greenholt"/>
			<Value value="Schaefer, McGlynn and Bosco"/>
			<Value value="Zulauf LLC"/>
			<Value value="Parisian and Sons"/>
			<Value value="Lehner, Mosciski and King"/>
		</DataField>
		<DataField name="amt" optype="continuous" dataType="double"/>
		<DataField name="age" optype="continuous" dataType="double"/>
		<DataField name="distance" optype="continuous" dataType="double"/>
	</DataDictionary>
	<MiningModel functionName="classification" algorithmName="sklearn.ensemble._forest.RandomForestClassifier">
		<MiningSchema>
			<MiningField name="is_fraud" usageType="target"/>
			<MiningField name="age"/>
			<MiningField name="merchant" invalidValueTreatment="asIs"/>
			<MiningField name="category" invalidValueTreatment="asIs"/>
			<MiningField name="amt"/>
			<MiningField name="distance"/>
		</MiningSchema>
		<Output>
			<OutputField name="probability(0)" optype="continuous" dataType="double" feature="probability" value="0"/>
			<OutputField name="probability(1)" optype="continuous" dataType="double" feature="probability" value="1"/>
		</Output>
		<LocalTransformations>
			<DerivedField name="log1p(amt)" optype="continuous" dataType="double">
				<Apply function="ln1p">
					<FieldRef field="amt"/>
				</Apply>
			</DerivedField>
			<DerivedField name="log1p(distance)" optype="continuous" dataType="double">
				<Apply function="ln1p">
					<FieldRef field="distance"/>
				</Apply>
			</DerivedField>
			<DerivedField name="robustScaler(log1p(amt))" optype="continuous" dataType="double">
				<Apply function="/">
					<Apply function="-">
						<FieldRef field="log1p(amt)"/>
						<Constant dataType="double">5.708768641061873</Constant>
					</Apply>
					<Constant dataType="double">1.443029898832644</Constant>
				</Apply>
			</DerivedField>
			<DerivedField name="robustScaler(log1p(distance))" optype="continuous" dataType="double">
				<Apply function="/">
					<Apply function="-">
						<FieldRef field="log1p(distance)"/>
						<Constant dataType="double">0.05935797867039077</Constant>
					</Apply>
					<Constant dataType="double">0.87529382618996</Constant>
				</Apply>
			</DerivedField>
			<DerivedField name="robustScaler(age)" optype="continuous" dataType="double">
				<Apply function="/">
					<Apply function="-">
						<FieldRef field="age"/>
						<Constant dataType="double">40.0</Constant>
					</Apply>
					<Constant dataType="double">23.75</Constant>
				</Apply>
			</DerivedField>
			<DerivedField name="target(category)" optype="continuous" dataType="double">
				<MapValues mapMissingTo="0.5" defaultValue="0.5" outputColumn="data:output">
					<FieldColumnPair field="category" column="data:input"/>
					<InlineTable>
						<row>
							<data:input>shopping_pos</data:input>
							<data:output>0.5603897325738989</data:output>
						</row>
						<row>
							<data:input>grocery_pos</data:input>
							<data:output>0.6838218444846104</data:output>
						</row>
						<row>
							<data:input>shopping_net</data:input>
							<data:output>0.7723485636520708</data:output>
						</row>
						<row>
							<data:input>gas_transport</data:input>
							<data:output>0.4334411917005644</data:output>
						</row>
						<row>
							<data:input>health_fitness</data:input>
							<data:output>0.18464984489673744</data:output>
						</row>
						<row>
							<data:input>misc_pos</data:input>
							<data:output>0.3452143215219203</data:output>
						</row>
						<row>
							<data:input>entertainment</data:input>
							<data:output>0.33053773460605257</data:output>
						</row>
						<row>
							<data:input>kids_pets</data:input>
							<data:output>0.25434360481472806</data:output>
						</row>
						<row>
							<data:input>home</data:input>
							<data:output>0.21951482989055218</data:output>
						</row>
						<row>
							<data:input>misc_net</data:input>
							<data:output>0.790725333044977</data:output>
						</row>
						<row>
							<data:input>grocery_net</data:input>
							<data:output>0.41250346875350996</data:output>
						</row>
						<row>
							<data:input>travel</data:input>
							<data:output>0.48750049553621566</data:output>
						</row>
						<row>
							<data:input>personal_care</data:input>
							<data:output>0.3382186473350703</data:output>
						</row>
						<row>
							<data:input>food_dining</data:input>
							<data:output>0.2700815805434317</data:output>
						</row>
					</InlineTable>
				</MapValues>
			</DerivedField>
			<DerivedField name="float(target(category))" optype="continuous" dataType="float">
				<FieldRef field="target(category)"/>
			</DerivedField>
			<DerivedField name="target(merchant)" optype="continuous" dataType="double">
				<MapValues mapMissingTo="0.5" defaultValue="0.5" outputColumn="data:output">
					<FieldColumnPair field="merchant" column="data:input"/>
					<InlineTable>
						<row>
							<data:input>Hickle Group</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Wolf Inc</data:input>
							<data:output>0.5182425523806357</data:output>
						</row>
						<row>
							<data:input>Fisher Inc</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Botsford Ltd</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Heathcote, Yost and Kertzmann</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Luettgen PLC</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Carroll PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Torp-Lemke</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Padberg-Rogahn</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kris-Padberg</data:input>
							<data:output>0.4452723428580931</data:output>
						</row>
						<row>
							<data:input>Brown Inc</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Runte, Green and Emard</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bins, Balistreri and Beatty</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Ledner, Hartmann and Feest</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Altenwerth-Kilback</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Auer-West</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Ankunding LLC</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Kilback LLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Padberg-Sauer</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Macejkovic-Lesch</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kuhn LLC</data:input>
							<data:output>0.5659387038138061</data:output>
						</row>
						<row>
							<data:input>Lockman, West and Runte</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Hintz, Bauch and Smith</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Kuhic, Bins and Pfeffer</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Rempel PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Mosciski, Gislason and Mertz</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Bahringer, Schoen and Corkery</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Turcotte-Halvorson</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kuhic Inc</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Botsford PLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Champlin, Rolfson and Connelly</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Lockman Ltd</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Wuckert-Goldner</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kris-Weimann</data:input>
							<data:output>0.5547276571419069</data:output>
						</row>
						<row>
							<data:input>Reichert, Huels and Hoppe</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Schamberger-OKeefe</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Barton Inc</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Gaylord-Powlowski</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Romaguera Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Mosciski, Ziemann and Farrell</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Connelly, Reichert and Fritsch</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Kiehn-Emmerich</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Goyette Inc</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Terry Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Durgan-Auer</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Gulgowski LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bogisich Inc</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Rutherford-Mertz</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Feil-Morar</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Jenkins, Hauck and Friesen</data:input>
							<data:output>0.4580045962834811</data:output>
						</row>
						<row>
							<data:input>Bode-Rempel</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Pacocha-OReilly</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Little, Gutmann and Lynch</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kutch, Hermiston and Farrell</data:input>
							<data:output>0.48175744761936434</data:output>
						</row>
						<row>
							<data:input>Runolfsson and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Cormier LLC</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Kling, Howe and Schneider</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Eichmann-Russel</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kiehn Inc</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Becker, Harris and Harvey</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Thiel PLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Predovic Inc</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Kassulke Inc</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>OKeefe-Hudson</data:input>
							<data:output>0.5547276571419069</data:output>
						</row>
						<row>
							<data:input>Deckow-OConner</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Roberts, Daniel and Macejkovic</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bauch-Raynor</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kozey-Boehm</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Daugherty, Pouros and Beahan</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Conroy Ltd</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kihn-Fritsch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Abbott-Steuber</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schultz, Simonis and Little</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Kutch, Steuber and Gerhold</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Haag-Blanda</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Cartwright PLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Weimann, Kuhic and Beahan</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Morissette-Schaefer</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Mohr-Bayer</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Johnston, Nikolaus and Maggio</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Haley Group</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Cole PLC</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Labadie, Treutel and Bode</data:input>
							<data:output>0.532969351906903</data:output>
						</row>
						<row>
							<data:input>Schuppe, Nolan and Hoeger</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schmeler, Bashirian and Price</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Schumm, Bauch and Ondricka</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Runolfsdottir, Mueller and Hand</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Wilkinson LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Douglas, Schneider and Turner</data:input>
							<data:output>0.4452723428580931</data:output>
						</row>
						<row>
							<data:input>Volkman Ltd</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Huel, Hammes and Witting</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Stamm-Witting</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Weimann-Lockman</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Shields-Wunsch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Parker, Nolan and Trantow</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rempel Inc</data:input>
							<data:output>0.5659387038138061</data:output>
						</row>
						<row>
							<data:input>Thompson-Gleason</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Brown PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Koepp-Parker</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Kirlin and Sons</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Strosin-Cruickshank</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Cartwright-Harris</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Pagac LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Jacobi and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Gottlieb, Considine and Schultz</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Homenick LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Durgan, Gislason and Spencer</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Jaskolski-Vandervort</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Abshire PLC</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Langworth, Boehm and Gulgowski</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Brekke and Sons</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Huel Ltd</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Bednar Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>OReilly, Mohr and Purdy</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Reichert, Rowe and Mraz</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Welch, Rath and Koepp</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Lynch Ltd</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Champlin and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Fahey Inc</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Bernhard Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Windler, Goodwin and Kovacek</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Christiansen-Gusikowski</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Armstrong, Walter and Gottlieb</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Hamill-DAmore</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Dach-Nader</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Bailey-Morar</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Block Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Medhurst, Cartwright and Ebert</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Osinski Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Waelchi Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Lang, Towne and Schuppe</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>DuBuque LLC</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Emard Inc</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Gottlieb Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Fadel Inc</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Dickinson Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Baumbach, Strosin and Nicolas</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Bode-Schuster</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bednar PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Jakubowski Inc</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Turner and Sons</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Friesen-DAmore</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>McKenzie-Huels</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rowe, Batz and Goodwin</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Wiza LLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Price Inc</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Erdman-Ebert</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Leffler-Goldner</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Terry-Huel</data:input>
							<data:output>0.5912127619031782</data:output>
						</row>
						<row>
							<data:input>Mueller, Gerhold and Mueller</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kozey-McDermott</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Flatley Group</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Zboncak, Rowe and Murazik</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Dicki Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bahringer-Streich</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Koss, McLaughlin and Mayer</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Cole, Hills and Jewess</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Reichert, Shanahan and Hayes</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Nienow, Barrows and Romaguera</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Lubowitz, Terry and Stracke</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schumm, McLaughlin and Carter</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Simonis-Prohaska</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Baumbach, Feeney and Morar</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Klocko, Runolfsdottir and Breitenberg</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Quitzon, Green and Bashirian</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>McGlynn-Heathcote</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kutch-Hegmann</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Jones, Sawayn and Romaguera</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Romaguera and Sons</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Denesik and Sons</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Towne, Greenholt and Koepp</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Olson, Becker and Koch</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Miller-Harris</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Corwin-Gorczany</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Hills-Witting</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Mante Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hermiston, Pacocha and Smith</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Harris, Gusikowski and Heaney</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kozey-Kuhlman</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Beier LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Metz, Russel and Metz</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bins-Rice</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Kunze, Larkin and Mayert</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Jast Ltd</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Murray-Smitham</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Kerluke, Kertzmann and Wiza</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Hayes, Marquardt and Dibbert</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Osinski, Ledner and Leuschke</data:input>
							<data:output>0.4670306480930969</data:output>
						</row>
						<row>
							<data:input>Zboncak Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kuhic LLC</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Kovacek, Dibbert and Ondricka</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Heidenreich PLC</data:input>
							<data:output>0.5659387038138061</data:output>
						</row>
						<row>
							<data:input>Gutmann-Upton</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Morissette LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Moen, Reinger and Murphy</data:input>
							<data:output>0.4452723428580931</data:output>
						</row>
						<row>
							<data:input>Kutch and Sons</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Greenholt, OHara and Balistreri</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Doyle Ltd</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Kilback, Nitzsche and Leffler</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Stoltenberg-Beatty</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Howe PLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Huel-Langworth</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Schimmel-Olson</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Crist, Jakubowski and Littel</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>McCullough LLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>McDermott, Osinski and Morar</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Kuphal-Toy</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kautzer and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Ankunding-Carroll</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Thiel-Thiel</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Dooley-Thompson</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Monahan, Bogisich and Ledner</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Kuvalis Ltd</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Roob, Conn and Tremblay</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Mraz-Herzog</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Kutch-Wilderman</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rohan, White and Aufderhar</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Medhurst Inc</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Buckridge PLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Bins-Howell</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schoen, Kuphal and Nitzsche</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Ullrich Ltd</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Pouros-Haag</data:input>
							<data:output>0.5182425523806357</data:output>
						</row>
						<row>
							<data:input>Metz-Boehm</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Friesen Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Stroman, Hudson and Erdman</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Greenholt, Jacobi and Gleason</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hermann-Gaylord</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Feil, Hilpert and Koss</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schoen, Nienow and Bauch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kerluke-Abshire</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Renner Ltd</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kihn Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Leannon-Nikolaus</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Bahringer, Osinski and Block</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Berge LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kling Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Cronin, Kshlerin and Weber</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Effertz, Welch and Schowalter</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Gerlach Inc</data:input>
							<data:output>0.5912127619031782</data:output>
						</row>
						<row>
							<data:input>Heller PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Koss, Hansen and Lueilwitz</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Swift PLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Kerluke PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Stracke-Lemke</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Marks Inc</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Gottlieb-Hansen</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Ernser-Feest</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Nitzsche, Kessler and Wolff</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Kub PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Effertz LLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Dibbert-Green</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Padberg-Welch</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Crooks and Sons</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bahringer-Larson</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Hudson-Grady</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Beier-Hyatt</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Casper, Hand and Zulauf</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Block-Parisian</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Eichmann, Bogan and Rodriguez</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Altenwerth, Cartwright and Koss</data:input>
							<data:output>0.5839908074330378</data:output>
						</row>
						<row>
							<data:input>Lubowitz-Walter</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Cormier, Stracke and Thiel</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Ferry, Lynch and Kautzer</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Jaskolski-Dibbert</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Ebert-Daugherty</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Huels-Hahn</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Lynch-Wisozk</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Donnelly PLC</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>White and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kutch LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Sporer Inc</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Medhurst PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schaefer, Maggio and Daugherty</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bernier and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Eichmann, Hayes and Treutel</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Schmidt and Sons</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Veum-Koelpin</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schulist Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Boyer PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Bashirian Group</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Raynor, Feest and Miller</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Welch Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Torp-Labadie</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bahringer Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Reilly and Sons</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Johns Inc</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Stark-Batz</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Hahn, Douglas and Schowalter</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Volkman-Predovic</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Herzog Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Yost, Schamberger and Windler</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Ledner-Pfannerstill</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Cummerata-Jones</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Conroy-Cruickshank</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Wintheiser, Dietrich and Schimmel</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Witting, Beer and Ernser</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Morissette PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schmitt Inc</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Klein Group</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Gleason-Macejkovic</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bins-Tillman</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Wilkinson PLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Fisher-Schowalter</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Streich, Hansen and Veum</data:input>
							<data:output>0.5772326325417674</data:output>
						</row>
						<row>
							<data:input>Botsford and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Pacocha-Bauch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Goldner, Kovacek and Abbott</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Cummings Group</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Goodwin-Nitzsche</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Hauck, Dietrich and Funk</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schmeler Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rau-Grant</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Rippin, Kub and Mann</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Nienow PLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Sawayn PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Collier LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Pacocha-Weissnat</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Harris Inc</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schoen-Quigley</data:input>
							<data:output>0.4227673674582326</data:output>
						</row>
						<row>
							<data:input>Beer-Jast</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Kassulke PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Vandervort-Funk</data:input>
							<data:output>0.5419954037165189</data:output>
						</row>
						<row>
							<data:input>Schroeder, Wolff and Hermiston</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Tillman, Fritsch and Schmitt</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Bartoletti-Wunsch</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Cruickshank-Mills</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rippin-VonRueden</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kilback Group</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Jewess LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Kling-Grant</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Waelchi-Wolf</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Jast-McDermott</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Weber and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rowe-Vandervort</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Pouros-Conroy</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Ferry, Reichel and DuBuque</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Turner, Ziemann and Lehner</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Moore, Williamson and Emmerich</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Heller, Gutmann and Zieme</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Cummings LLC</data:input>
							<data:output>0.5257442108472558</data:output>
						</row>
						<row>
							<data:input>Fadel, Mertz and Rippin</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kulas Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Dibbert and Sons</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Swaniawski, Lowe and Robel</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Lemke-Gutmann</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Gislason Group</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Williamson LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kuphal-Predovic</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Streich Ltd</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Streich, Dietrich and Barton</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bernhard-Lesch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Roberts, Ryan and Smith</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Bahringer, Bergnaum and Quitzon</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hintz-Bruen</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Volkman PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Quitzon-Goyette</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Shields Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Wilkinson Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Torphy-Goyette</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Lesch Ltd</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kunze Inc</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Goyette, Howell and Collier</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Little Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Connelly PLC</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Koelpin and Sons</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Hettinger, McCullough and Fay</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Schmeler-Howe</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Nienow, Ankunding and Collier</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Pfeffer and Sons</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Hills, Hegmann and Schaefer</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Berge, Kautzer and Harris</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bogisich-Homenick</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Langosh, Wintheiser and Hyatt</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Dare, Fritsch and Zboncak</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Flatley-Durgan</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Kessler Group</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Morissette, Weber and Wiegand</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Bogisich-Weimann</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kihn-Schuster</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Watsica LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Ruecker, Beer and Collier</data:input>
							<data:output>0.5709255324502438</data:output>
						</row>
						<row>
							<data:input>Friesen-Stamm</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Windler LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kutch Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Nicolas, Hills and McGlynn</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Mayert Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Haley, Jewess and Bechtelar</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hudson-Ratke</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Daugherty LLC</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Schiller Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Kunde-Sanford</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schaefer Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Spinka-Welch</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Johnson, Runolfsdottir and Mayer</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Adams-Barrows</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Powlowski-Weimann</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Roberts-Beahan</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Little-Gleichner</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Gibson-Deckow</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Dietrich-Fadel</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>McDermott-Weimann</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Hills-Boyer</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Goyette-Gerhold</data:input>
							<data:output>0.4742557891527442</data:output>
						</row>
						<row>
							<data:input>Romaguera, Cruickshank and Greenholt</data:input>
							<data:output>0.5</data:output>
						</row>
						<row>
							<data:input>Rodriguez, Yost and Jenkins</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Dooley Inc</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Rau and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hagenes, Kohler and Hoppe</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Koepp-Witting</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schaefer, Fay and Hilll</data:input>
							<data:output>0.4290744675497561</data:output>
						</row>
						<row>
							<data:input>Shanahan-Lehner</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Skiles LLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Swaniawski, Nitzsche and Welch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Stiedemann Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hackett-Lueilwitz</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Prohaska-Murray</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Maggio-Fahey</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Stark-Koss</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Bernier, Volkman and Hoeger</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Upton PLC</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Streich, Rolfson and Wilderman</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Murray Ltd</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Herman, Treutel and Dickens</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Nolan-Williamson</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Raynor, Reinger and Hagenes</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Brown, Homenick and Lesch</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Torp, Muller and Borer</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Jakubowski Group</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Hermann and Sons</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Dach-Borer</data:input>
							<data:output>0.43494576281850106</data:output>
						</row>
						<row>
							<data:input>Brown-Greenholt</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Schaefer, McGlynn and Bosco</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Zulauf LLC</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Parisian and Sons</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
						<row>
							<data:input>Lehner, Mosciski and King</data:input>
							<data:output>0.5650542371814989</data:output>
						</row>
					</InlineTable>
				</MapValues>
			</DerivedField>
			<DerivedField name="float(target(merchant))" optype="continuous" dataType="float">
				<FieldRef field="target(merchant)"/>
			</DerivedField>
			<DerivedField name="float(robustScaler(log1p(amt)))" optype="continuous" dataType="float">
				<FieldRef field="robustScaler(log1p(amt))"/>
			</DerivedField>
			<DerivedField name="float(robustScaler(log1p(distance)))" optype="continuous" dataType="float">
				<FieldRef field="robustScaler(log1p(distance))"/>
			</DerivedField>
			<DerivedField name="float(robustScaler(age))" optype="continuous" dataType="float">
				<FieldRef field="robustScaler(age)"/>
			</DerivedField>
			<DerivedField name="double(float(robustScaler(log1p(amt))))" optype="continuous" dataType="double">
				<FieldRef field="float(robustScaler(log1p(amt)))"/>
			</DerivedField>
			<DerivedField name="double(float(robustScaler(age)))" optype="continuous" dataType="double">
				<FieldRef field="float(robustScaler(age))"/>
			</DerivedField>
			<DerivedField name="double(float(robustScaler(log1p(distance))))" optype="continuous" dataType="double">
				<FieldRef field="float(robustScaler(log1p(distance)))"/>
			</DerivedField>
			<DerivedField name="double(float(target(merchant)))" optype="continuous" dataType="double">
				<FieldRef field="float(target(merchant))"/>
			</DerivedField>
			<DerivedField name="double(float(target(category)))" optype="continuous" dataType="double">
				<FieldRef field="float(target(category))"/>
			</DerivedField>
		</LocalTransformations>
		<Segmentation multipleModelMethod="average" missingPredictionTreatment="returnMissing">
			<Segment id="1">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.25726571679115295"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8420963883399963"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.11111859977245331"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5729702115058899"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4000000059604645"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.243794659152627"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3218304365873337"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4674728810787201"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.5"/>
									<ScoreDistribution value="1" recordCount="0.5"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09880615677684546"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.11898708716034889"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1298072338104248"/>
									<ScoreDistribution value="0" recordCount="0.21428571428571427"/>
									<ScoreDistribution value="1" recordCount="0.7857142857142857"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.6666666666666666"/>
									<ScoreDistribution value="1" recordCount="0.3333333333333333"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5263157784938812"/>
								<ScoreDistribution value="0" recordCount="0.4"/>
								<ScoreDistribution value="1" recordCount="0.6"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.005165101960301399"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="2">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="3">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.909737855196E-4"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="4">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08617858961224556"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3869466632604599"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14165940321981907"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.10526315867900848"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.75789475440979"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.21739130434782608"/>
										<ScoreDistribution value="1" recordCount="0.782608695652174"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9263157844543457"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.8181818181818182"/>
									<ScoreDistribution value="1" recordCount="0.18181818181818182"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.03857031464576721"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.29328525997698307"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5052631497383118"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.17391304347826086"/>
								<ScoreDistribution value="1" recordCount="0.8260869565217391"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.070303525775671"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="5">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.05120788421481848"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="6">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5293567776679993"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08515181485563517"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.008506108075380325"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="7">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3343781977891922"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.10526315867900848"/>
									<Node>
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.213798426091671"/>
										<Node score="0" recordCount="1">
											<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.13631107285618782"/>
											<ScoreDistribution value="0" recordCount="1"/>
											<ScoreDistribution value="1" recordCount="0"/>
										</Node>
										<Node score="1" recordCount="1">
											<True/>
											<ScoreDistribution value="0" recordCount="0"/>
											<ScoreDistribution value="1" recordCount="1"/>
										</Node>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6736842095851898"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2639643903821707"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09890429023653269"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.4178187847137451"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4478867193683982"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.3933531790971756"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.23959946632385254"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.8842105269432068"/>
									<ScoreDistribution value="0" recordCount="0.6428571428571429"/>
									<ScoreDistribution value="1" recordCount="0.35714285714285715"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07998576015233994"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2359352484345436"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.7860338091850281"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23634522780776024"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.707822173833847"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.16319162212312222"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.006297297775745392"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="8">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09890429023653269"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3273257315158844"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.28576525393873453"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07969440147280693"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="9">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.05130601767450571"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="10">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2726301094517112"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2622753381729126"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12301963567733765"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0792025662958622"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.005757051520049572"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="11">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4546007812023163"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2020823359489441"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2666679862886667"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.8236609101295471"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.36542881932109594"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.147368423640728"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.007726807147264481"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08250008709728718"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="12">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.38896703720092773"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8725918829441071"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45615150034427643"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3666174104437232"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0016699284315109253"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="13">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2673337161540985"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.27951657213270664"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5715856850147247"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.305554136633873"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.49881131015717983"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.8236609101295471"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9263157844543457"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.36046317778527737"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.012593231163918972"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="14">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.27074746787548065"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14320310298353434"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.10664351657032967"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4478867193683982"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.5529390629380941"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6526315808296204"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.09839484840631485"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.24086519330739975"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.75"/>
										<ScoreDistribution value="1" recordCount="0.25"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2020823359489441"/>
									<ScoreDistribution value="0" recordCount="0.5555555555555556"/>
									<ScoreDistribution value="1" recordCount="0.4444444444444444"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.09836065573770492"/>
									<ScoreDistribution value="1" recordCount="0.9016393442622951"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.005757051520049572"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.8631578981876373"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.33787602186203003"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5128720998764038"/>
								<ScoreDistribution value="0" recordCount="0.14285714285714285"/>
								<ScoreDistribution value="1" recordCount="0.8571428571428571"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="15">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09284424688667059"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.04703409597277641"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="16">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="17">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="18">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="19">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.24898015707731247"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.7752611339092255"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12619793321937323"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.18630916625261307"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5535248219966888"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.18949586991220713"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09164290502667427"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.008063430897891521"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="20">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5219933688640594"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09294238034635782"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08190278150141239"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.01123566273599863"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="21">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2673337161540985"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.6649775207042694"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.875"/>
										<ScoreDistribution value="1" recordCount="0.125"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7789473533630371"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014146189205348492"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="22">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.06153535097837448"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14320310298353434"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.24110985733568668"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45615150034427643"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09152691997587681"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.34369632601737976"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7578947246074677"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.06940926052629948"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8691095113754272"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.005619307979941368"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="23">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.5596917867660522"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3819894641637802"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.589473694562912"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.27368420735001564"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08776197209954262"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0016699284315109253"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="24">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="25">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.25394195318222046"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12649368401616812"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0012867245823144913"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="26">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5219933688640594"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.47475668136030436"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09152691997587681"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2506576329469681"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23634522780776024"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07828673534095287"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.006199728697538376"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="27">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="28">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="29">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.8974284827709198"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.1518603703007102"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0015436997637152672"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="30">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.909737855196E-4"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="31">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09307061973959208"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2690363973379135"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12594095803797245"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1013023778796196"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5293567776679993"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.800000011920929"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.7280852198600769"/>
										<ScoreDistribution value="0" recordCount="0.4"/>
										<ScoreDistribution value="1" recordCount="0.6"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3858299255371094"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.7071483731269836"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
									<ScoreDistribution value="0" recordCount="0.11764705882352941"/>
									<ScoreDistribution value="1" recordCount="0.8823529411764706"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.875"/>
									<ScoreDistribution value="1" recordCount="0.125"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
								<ScoreDistribution value="0" recordCount="0.29411764705882354"/>
								<ScoreDistribution value="1" recordCount="0.7058823529411765"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.006329113924050633"/>
								<ScoreDistribution value="1" recordCount="0.9936708860759493"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="32">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09297248627990484"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0015436997637152672"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="33">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.255595862865448"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8176426291465759"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.33328838646411896"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.29505354166030884"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5715856850147247"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.24061714950948954"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.7923928499221802"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.10526315867900848"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9263157844543457"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4871279001235962"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.3333333333333333"/>
										<ScoreDistribution value="1" recordCount="0.6666666666666666"/>
									</Node>
								</Node>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.18540874682366848"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08636581804603338"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="34">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3869466632604599"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12649368401616812"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6526315808296204"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5219933688640594"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.06315789371728897"/>
										<ScoreDistribution value="0" recordCount="0.875"/>
										<ScoreDistribution value="1" recordCount="0.125"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.021052632480859756"/>
									<ScoreDistribution value="0" recordCount="0.5897435897435898"/>
									<ScoreDistribution value="1" recordCount="0.41025641025641024"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.35714285714285715"/>
									<ScoreDistribution value="1" recordCount="0.6428571428571429"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
									<ScoreDistribution value="0" recordCount="0.7777777777777778"/>
									<ScoreDistribution value="1" recordCount="0.2222222222222222"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.14705882352941177"/>
									<ScoreDistribution value="1" recordCount="0.8529411764705882"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.7815369665622711"/>
								<ScoreDistribution value="0" recordCount="0.0196078431372549"/>
								<ScoreDistribution value="1" recordCount="0.9803921568627451"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.18181818181818182"/>
								<ScoreDistribution value="1" recordCount="0.8181818181818182"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45615150034427643"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="35">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.05130601767450571"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="36">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.8377611637115479"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.2526315748691559"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.456673089414835"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6526315808296204"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1480591744184494"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
									<Node>
										<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.29244066774845123"/>
										<Node score="0" recordCount="1">
											<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.13010905869305134"/>
											<ScoreDistribution value="0" recordCount="1"/>
											<ScoreDistribution value="1" recordCount="0"/>
										</Node>
										<Node score="1" recordCount="1">
											<True/>
											<ScoreDistribution value="0" recordCount="0"/>
											<ScoreDistribution value="1" recordCount="1"/>
										</Node>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23907344974577427"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.6933570504188538"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.6839556097984314"/>
										<ScoreDistribution value="0" recordCount="0.3972602739726027"/>
										<ScoreDistribution value="1" recordCount="0.6027397260273972"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5128720998764038"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08847735822200775"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4575251583009958"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="37">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="38">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="39">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.909737855196E-4"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.012976435013115406"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="40">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2456958368420601"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12619793321937323"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.009913774207234383"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="41">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3254777640104294"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.11992383934557438"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.8842105269432068"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5551010072231293"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0016699284315109253"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="42">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="43">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.012976435013115406"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="44">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2827089726924896"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.11957711540162563"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.34600628912448883"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.365204393863678"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5386163294315338"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4871279001235962"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.310926228761673"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.23157894611358643"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.5"/>
								<ScoreDistribution value="1" recordCount="0.5"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="45">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1552152931690216"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12649368401616812"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09880615677684546"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.36187033355236053"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.04324258677661419"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.021052632480859756"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5338698029518127"/>
								<ScoreDistribution value="0" recordCount="0.35"/>
								<ScoreDistribution value="1" recordCount="0.65"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
							<ScoreDistribution value="0" recordCount="0.0392156862745098"/>
							<ScoreDistribution value="1" recordCount="0.9607843137254902"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="46">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.686845064163208"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.37344753090292215"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.8236609101295471"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45166513323783875"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.305554136633873"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12594095803797245"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0049949632957577705"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="47">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2827089726924896"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.49691547453403473"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4027679804712534"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.75789475440979"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.36325231194496155"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4864466190338135"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2020823359489441"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.7157894670963287"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.3789473623037338"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="48">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.2526315748691559"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7157894670963287"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.22433616779744625"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.267321340739727"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.08421052619814873"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.35197967663407326"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1569017469882965"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.42087191715836525"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3090455159544945"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.125"/>
								<ScoreDistribution value="1" recordCount="0.875"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.11608406901359558"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12594095803797245"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.16271674633026123"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.8333333333333334"/>
										<ScoreDistribution value="1" recordCount="0.16666666666666666"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.32079948484897614"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.23692921549081802"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2885338272899389"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12411871738731861"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3343781977891922"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6947368383407593"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.2"/>
								<ScoreDistribution value="1" recordCount="0.8"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="49">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.5591914290562272"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5263157859444618"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="1.8736842274665833"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.16842105239629745"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.13820813968777657"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5263157784938812"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09723436180502176"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.03857031464576721"/>
								<ScoreDistribution value="0" recordCount="0.7692307692307693"/>
								<ScoreDistribution value="1" recordCount="0.23076923076923078"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.11764705882352941"/>
								<ScoreDistribution value="1" recordCount="0.8823529411764706"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3869466632604599"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7789473533630371"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.005757051520049572"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="50">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2673337161540985"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.8210526406764984"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8420963883399963"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4230396384373307"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09103034343570471"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6105262935161591"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4871279001235962"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.43825292959809303"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.06882995367050171"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12594095803797245"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07828673534095287"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5263157784938812"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45615150034427643"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3303387314081192"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="51">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45163847506046295"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.08421052619814873"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.36046317778527737"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09064367227256298"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2359352484345436"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5684321224689484"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.7789232134819031"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12321273609995842"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5219933688640594"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.6929337382316589"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08794741705060005"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.16842105239629745"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9263157844543457"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.45454545454545453"/>
									<ScoreDistribution value="1" recordCount="0.5454545454545454"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07331630773842335"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="52">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="53">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="54">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-1.1697039008140564E-4"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="55">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3254777640104294"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.13666675053536892"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3454141253605485"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="56">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-1.1697039008140564E-4"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="57">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3236784040927887"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5535248219966888"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4648475283756852"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.44647517800331116"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5338698029518127"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.1480522695928812"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.24734188616275787"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23933042492717505"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.009417949244379997"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="58">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2673584669828415"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8455787599086761"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5128720998764038"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3345172330737114"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5596140325069427"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.49691547453403473"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.4300636276602745"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0016699284315109253"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="59">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3752232939004898"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.13923273980617523"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3417164832353592"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.21165335178375244"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.29244066774845123"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.2"/>
										<ScoreDistribution value="1" recordCount="0.8"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.3557669073343277"/>
									<ScoreDistribution value="0" recordCount="0.7894736842105263"/>
									<ScoreDistribution value="1" recordCount="0.21052631578947367"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.3157894736842105"/>
									<ScoreDistribution value="1" recordCount="0.6842105263157895"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7578947246074677"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.6666666666666666"/>
									<ScoreDistribution value="1" recordCount="0.3333333333333333"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.5114479213953018"/>
								<ScoreDistribution value="0" recordCount="0.375"/>
								<ScoreDistribution value="1" recordCount="0.625"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.03225806451612903"/>
								<ScoreDistribution value="1" recordCount="0.967741935483871"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.004271921701729298"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="60">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.5239451229572296"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3236784040927887"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14221212919801474"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.22813352849334478"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6526315808296204"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5374823808670044"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
									<ScoreDistribution value="0" recordCount="0.6933333333333334"/>
									<ScoreDistribution value="1" recordCount="0.30666666666666664"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.5526315789473685"/>
									<ScoreDistribution value="1" recordCount="0.4473684210526316"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.7815369665622711"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2224965374916792"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.21052631363272667"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2849881201982498"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45615150034427643"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="1.1157894730567932"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.43717341125011444"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.4344475716352463"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="61">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.05130601767450571"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="62">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="63">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014146189205348492"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="64">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14308613259345293"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09139868058264256"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.39924949407577515"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12321273609995842"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.1466420218348503"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.22102035023272038"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07598035596311092"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="65">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9894736707210541"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23058853391557932"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09178389515727758"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.6526315808296204"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.004561170004308224"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.39924949407577515"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5128720998764038"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.75789475440979"/>
									<ScoreDistribution value="0" recordCount="0.3333333333333333"/>
									<ScoreDistribution value="1" recordCount="0.6666666666666666"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.6666666666666666"/>
									<ScoreDistribution value="1" recordCount="0.3333333333333333"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="66">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="67">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2673337161540985"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12748465780168772"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.44907531049102545"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.147368423640728"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5338698029518127"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2236965037882328"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5535248219966888"/>
									<ScoreDistribution value="0" recordCount="0.25"/>
									<ScoreDistribution value="1" recordCount="0.75"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5219933688640594"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0912724519148469"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5293567776679993"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.05194774642586708"/>
								<ScoreDistribution value="0" recordCount="0.3333333333333333"/>
								<ScoreDistribution value="1" recordCount="0.6666666666666666"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="68">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="69">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="70">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.26906953752040863"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
									<Node>
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
										<Node score="0" recordCount="1">
											<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4201644416898489"/>
											<ScoreDistribution value="0" recordCount="1"/>
											<ScoreDistribution value="1" recordCount="0"/>
										</Node>
										<Node score="1" recordCount="1">
											<True/>
											<ScoreDistribution value="0" recordCount="0"/>
											<ScoreDistribution value="1" recordCount="1"/>
										</Node>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4871279001235962"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.42149593867361546"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12321273609995842"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2849881201982498"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.42297233641147614"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.04646080732345581"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="71">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2690363973379135"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14320310298353434"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3417164832353592"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4546007812023163"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2020823359489441"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.27368420362472534"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2659889739006758"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2265617335215211"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.3830282539129257"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0821145661175251"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.009417949244379997"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="72">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09282540995627642"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07977186515927315"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.019882467575371265"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="73">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.27074746787548065"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.24061714950948954"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.708790510892868"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014146189205348492"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45098820328712463"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="74">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014165026135742664"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="75">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5091212689876556"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.46613019704818726"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.6041616797447205"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0912724519148469"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.19239577651023865"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9894737005233765"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4623784264549613"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45098820328712463"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.16842105239629745"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.48351532220840454"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0.3333333333333333"/>
									<ScoreDistribution value="1" recordCount="0.6666666666666666"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5483615398406982"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5684210360050201"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.7623616456985474"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07607792504131794"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.18179015442728996"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.04007035493850708"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.005619307979941368"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="76">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.893773764371872"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4266026606783271"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.16842105239629745"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3218304365873337"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.779103696346283"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.11754672229290009"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9263157844543457"/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.6333333333333333"/>
										<ScoreDistribution value="1" recordCount="0.36666666666666664"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.18617083504796028"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08492025174200535"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8691095113754272"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="77">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7157894670963287"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8365963399410248"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.45163847506046295"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.2526315748691559"/>
								<Node>
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4000000059604645"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.26702480390667915"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5052631497383118"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.09212912479415536"/>
									<ScoreDistribution value="0" recordCount="0.8461538461538461"/>
									<ScoreDistribution value="1" recordCount="0.15384615384615385"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.0593005008995533"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0.5"/>
								<ScoreDistribution value="1" recordCount="0.5"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0015436997637152672"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="78">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="79">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.08636581804603338"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="80">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="81">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="82">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.08421052619814873"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.35197967663407326"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="1.4526315927505493"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.2559068538248539"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5293567776679993"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.16842105239629745"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.18617083504796028"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3343781977891922"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5128720998764038"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09499805606901646"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0"/>
										<ScoreDistribution value="1" recordCount="1"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.15464428067207336"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09139868058264256"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.30378179252147675"/>
								<Node>
									<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.7280852198600769"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="0.75"/>
										<ScoreDistribution value="1" recordCount="0.25"/>
									</Node>
								</Node>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.7578947246074677"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.3999999910593033"/>
								<Node score="1" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.589473694562912"/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
								<Node score="0" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.862248033285141"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.03756575658917427"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="83">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="84">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.255595862865448"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.9052631556987762"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.1209483053535223"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.2393050128594041"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47064322233200073"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.5052631571888924"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.11265116464346647"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.46958971582353115"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.4842105209827423"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.5473684072494507"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3093560226261616"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="1.051394760608673"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.07607792504131794"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="85">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="86">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.49087873101234436"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.5721505582332611"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.36428859643638134"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.440109059214592"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.01271945983171463"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="87">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="88">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="89">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.0414538886398077"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.12748465780168772"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.7887378036975861"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4625176191329956"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3617968149483204"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.009006325155496597"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="90">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3273257315158844"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4546007812023163"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5715856850147247"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="91">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="92">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="93">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="94">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="95">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.0"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="96">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.47800663113594055"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.23058853391557932"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.7753325700759888"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.10395750775933266"/>
							<Node score="1" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
							<Node>
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.34983497858047485"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.4224373549222946"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.19732812885195017"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2020823359489441"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="0.6933570504188538"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.009006325155496597"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="97">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.014263159595429897"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="98">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(age)))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.3254777640104294"/>
							<Node>
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="-0.6315789520740509"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.1209483053535223"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(age)))" operator="lessOrEqual" value="0.8842105269432068"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.3549066251143813"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="99">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.4604708403348923"/>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-9.813345968723297E-5"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.05001929309219122"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="100">
				<True/>
				<TreeModel functionName="classification" missingValueStrategy="nullPrediction">
					<MiningSchema>
						<MiningField name="double(float(robustScaler(log1p(amt))))"/>
						<MiningField name="double(float(robustScaler(log1p(distance))))"/>
						<MiningField name="double(float(target(merchant)))"/>
						<MiningField name="double(float(target(category)))"/>
					</MiningSchema>
					<Node>
						<True/>
						<Node>
							<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.255595862865448"/>
							<Node>
								<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.5598909556865692"/>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.14221212919801474"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.8725918829441071"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.34926914796233177"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node>
							<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.6221058070659637"/>
							<Node>
								<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.3343781977891922"/>
								<Node>
									<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4871279001235962"/>
									<Node score="0" recordCount="1">
										<SimplePredicate field="double(float(target(merchant)))" operator="lessOrEqual" value="0.4546007812023163"/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
									<Node score="1" recordCount="1">
										<SimplePredicate field="double(float(target(category)))" operator="lessOrEqual" value="0.2447982057929039"/>
										<ScoreDistribution value="0" recordCount="0.25"/>
										<ScoreDistribution value="1" recordCount="0.75"/>
									</Node>
									<Node score="0" recordCount="1">
										<True/>
										<ScoreDistribution value="0" recordCount="1"/>
										<ScoreDistribution value="1" recordCount="0"/>
									</Node>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(amt))))" operator="lessOrEqual" value="-0.028286118526011705"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="0" recordCount="1">
									<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.09164290502667427"/>
									<ScoreDistribution value="0" recordCount="1"/>
									<ScoreDistribution value="1" recordCount="0"/>
								</Node>
								<Node score="1" recordCount="1">
									<True/>
									<ScoreDistribution value="0" recordCount="0"/>
									<ScoreDistribution value="1" recordCount="1"/>
								</Node>
							</Node>
							<Node score="0" recordCount="1">
								<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="-0.0016699284315109253"/>
								<ScoreDistribution value="0" recordCount="1"/>
								<ScoreDistribution value="1" recordCount="0"/>
							</Node>
							<Node score="1" recordCount="1">
								<True/>
								<ScoreDistribution value="0" recordCount="0"/>
								<ScoreDistribution value="1" recordCount="1"/>
							</Node>
						</Node>
						<Node score="0" recordCount="1">
							<SimplePredicate field="double(float(robustScaler(log1p(distance))))" operator="lessOrEqual" value="0.012976435013115406"/>
							<ScoreDistribution value="0" recordCount="1"/>
							<ScoreDistribution value="1" recordCount="0"/>
						</Node>
						<Node score="1" recordCount="1">
							<True/>
							<ScoreDistribution value="0" recordCount="0"/>
							<ScoreDistribution value="1" recordCount="1"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
		</Segmentation>
	</MiningModel>
</PMML>
